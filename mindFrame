<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>MindFrame – Ordnung im Kopf, Fokus im Alltag</title>
  <style>
    body {
      font-family: "Open Sans", Arial, sans-serif;
      background: #f9fafb;
      margin: 20px;
      color: #333;
    }
    header {
      text-align: center;
      margin-bottom: 20px;
    }
    header h1 {
      margin: 0;
      font-size: 28px;
      color: #2c3e50;
    }
    header p {
      margin: 4px 0 0;
      font-size: 14px;
      color: #555;
    }
    table {
      border-collapse: collapse;
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    th {
      background: #2c3e50;
      color: white;
      padding: 8px;
      font-size: 13px;
    }
    td {
      border: 1px solid #e0e0e0;
      text-align: center;
      padding: 0;
    }
    .narrow { width: 60px; }
    select {
      width: 100%;
      border: none;
      padding: 3px;
      font-size: 13px;
    }
    textarea {
      width: 100%;
      height: 40px;
      border: none;
      resize: none;
      box-sizing: border-box;
      font-size: 13px;
      padding: 4px;
      font-family: "Open Sans", Arial, sans-serif;
    }
    tr:nth-child(even) { background: #f4f6f7; }
/* Abschnittsüberschrift (Standard) */
  .section-header {
    font-weight: bold;
    cursor: pointer;
    text-align: left;
  }
  .section-header td {
    padding: 6px 10px;
  }

  /* Nacht */
  #nacht-block .section-header {
    background: #2c3e50;
    color: #ecf0f1;
  }

  /* Morgen */
  #morgen-block .section-header {
    background: #2980b9;
    color: #ffffff;
  }

  /* Mittag */
  #mittag-block .section-header {
    background: #f39c12;
    color: #ffffff;
  }

  /* Abend */
  #abend-block .section-header {
    background: #8e44ad;
    color: #ffffff;
  }

    .hidden { display: none; }

    .export-container {
      text-align: right;
      margin: 10px auto;
      width: 90%;
      max-width: 1200px;
    }
    select, button {
      padding: 6px 10px;
      font-size: 14px;
      margin-left: 5px;
    }
    footer {
      text-align: center;
      margin-top: 30px;
      font-size: 12px;
      color: #666;
    }
  </style>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
</head>
<body>

<header>
  <h1>MindFrame</h1>
  <p>Ordnung im Kopf, Fokus im Alltag</p>
</header>

<div class="export-container">
  <label for="exportType">Export als:</label>
  <select id="exportType">
    <option value="pdf">PDF</option>
    <option value="xlsx">Excel (XLSX)</option>
    <option value="csv">CSV</option>
    <option value="md">Markdown</option>
    <option value="ics">Kalender (ICS)</option>
  </select>
  <button onclick="exportData()">Exportieren</button>
</div>

<table id="plan">
  <thead>
    <tr>
      <th class="narrow">Task Nr.</th>
      <th>Zeit</th>
      <th>Task</th>
      <th>Ziel</th>
    </tr>
  </thead>

  <!-- Nacht -->
  <tbody id="nacht-block">
    <tr class="section-header" onclick="toggleSection('nacht-block', this)">
      <td colspan="4">▸ Nacht (00:00 – 06:00)</td>
    </tr>
  </tbody>

  <!-- Morgen -->
  <tbody id="morgen-block">
    <tr class="section-header" onclick="toggleSection('morgen-block', this)">
      <td colspan="4">▸ Morgen (06:00 – 12:00)</td>
    </tr>
  </tbody>

  <!-- Mittag -->
  <tbody id="mittag-block">
    <tr class="section-header" onclick="toggleSection('mittag-block', this)">
      <td colspan="4">▸ Mittag (12:00 – 18:00)</td>
    </tr>
  </tbody>

  <!-- Abend -->
  <tbody id="abend-block">
    <tr class="section-header" onclick="toggleSection('abend-block', this)">
      <td colspan="4">▸ Abend (18:00 – 24:00)</td>
    </tr>
  </tbody>
</table>

<footer>
  © 2025 MindFrame Project – MIT License
</footer>

<script>
function buildSection(sectionId, startHour, endHour) {
  const tbody = document.getElementById(sectionId + "-block");
  for (let h = startHour; h < endHour; h++) {
    for (let m = 0; m < 60; m += 15) {
      const row = document.createElement("tr");
      row.classList.add(sectionId + "-row", "hidden");

      // Task Nr.
      const tdNr = document.createElement("td");
      const sel = document.createElement("select");
      sel.onchange = groupTasks;
      sel.add(new Option("–", ""));
      for (let i = 1; i <= 10; i++) sel.add(new Option(i, i));
      tdNr.appendChild(sel);
      row.appendChild(tdNr);

      // Zeit
      const tdTime = document.createElement("td");
      tdTime.textContent = `${String(h).padStart(2,"0")}:${String(m).padStart(2,"0")}`;
      row.appendChild(tdTime);

      // Task
      const tdTask = document.createElement("td");
      tdTask.className = "task";
      tdTask.innerHTML = "<textarea></textarea>";
      row.appendChild(tdTask);

      // Ziel
      const tdZiel = document.createElement("td");
      tdZiel.className = "ziel";
      tdZiel.innerHTML = "<textarea></textarea>";
      row.appendChild(tdZiel);

      tbody.appendChild(row);
    }
  }
}

function toggleSection(sectionId, headerRow) {
  const rows = document.querySelectorAll(`#${sectionId} tr:not(.section-header)`);
  const hidden = rows[0]?.classList.contains("hidden");
  rows.forEach(r => {
    if (hidden) r.classList.remove("hidden");
    else r.classList.add("hidden");
  });

  if (hidden) {
    headerRow.cells[0].textContent = headerRow.cells[0].textContent.replace("▸", "▾");
  } else {
    headerRow.cells[0].textContent = headerRow.cells[0].textContent.replace("▾", "▸");
  }
}

function groupTasks() {
  const table = document.getElementById("plan");
  const rows = table.querySelectorAll("tbody tr");

  // Reset
  rows.forEach(r => {
    const task = r.querySelector(".task");
    const ziel = r.querySelector(".ziel");
    if (task && ziel) {
      task.style.display = "";
      ziel.style.display = "";
      task.removeAttribute("rowspan");
      ziel.removeAttribute("rowspan");
      task.querySelector("textarea").style.height = "40px";
      ziel.querySelector("textarea").style.height = "40px";
    }
  });

  // Gruppieren
  let lastValue = null, groupStart = null, count = 0;
  rows.forEach(r => {
    const select = r.querySelector("select");
    if (!select) return;
    const val = select.value;

    if (val && val === lastValue) {
      const task = r.querySelector(".task");
      const ziel = r.querySelector(".ziel");
      if (task) task.style.display = "none";
      if (ziel) ziel.style.display = "none";
      count++;
    } else {
      if (groupStart && count > 0) {
        const t = groupStart.querySelector(".task");
        const z = groupStart.querySelector(".ziel");
        if (t && z) {
          t.setAttribute("rowspan", count+1);
          z.setAttribute("rowspan", count+1);
          t.querySelector("textarea").style.height = `${40*(count+1)}px`;
          z.querySelector("textarea").style.height = `${40*(count+1)}px`;
        }
      }
      groupStart = r; count = 0;
    }
    lastValue = val;
  });
  if (groupStart && count > 0) {
    const t = groupStart.querySelector(".task");
    const z = groupStart.querySelector(".ziel");
    if (t && z) {
      t.setAttribute("rowspan", count+1);
      z.setAttribute("rowspan", count+1);
      t.querySelector("textarea").style.height = `${40*(count+1)}px`;
      z.querySelector("textarea").style.height = `${40*(count+1)}px`;
    }
  }
}

// Abschnitte bauen
buildSection("nacht", 0, 6);
buildSection("morgen", 6, 12);
buildSection("mittag", 12, 18);
buildSection("abend", 18, 24);

function exportData() {
  const type = document.getElementById("exportType").value;
  const rows = document.querySelectorAll("#plan tbody tr:not(.section-header)");

  let data = [];
  rows.forEach(r => {
    const time = r.cells[1]?.innerText || "";
    const task = r.querySelector(".task textarea")?.value.trim() || "";
    const ziel = r.querySelector(".ziel textarea")?.value.trim() || "";
    if (task) {
      data.push({ time, task, ziel });
    }
  });

  if (type === "csv") {
    let csv = "Zeit;Task;Ziel\n";
    data.forEach(d => {
      csv += `${d.time};"${d.task}";"${d.ziel}"\n`;
    });
    downloadFile(csv, "mindframe.csv", "text/csv");
  }

  else if (type === "md") {
    let md = "# MindFrame Export\n\n";
    data.forEach(d => {
      md += `- **${d.time}** – ${d.task} _(Ziel: ${d.ziel})_\n`;
    });
    downloadFile(md, "mindframe.md", "text/markdown");
  }

  else if (type === "ics") {
    let ics = "BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//MindFrame//DE\n";
    for (let i=0; i<data.length; i++) {
      const start = data[i].time;
      const [h,m] = start.split(":").map(Number);
      const startDate = new Date();
      startDate.setHours(h, m, 0, 0);
      const endDate = new Date(startDate.getTime() + 15*60000);

      const fmt = (d) => d.toISOString().replace(/[-:]/g,"").split(".")[0]+"Z";
      ics += "BEGIN:VEVENT\n";
      ics += "DTSTART:"+fmt(startDate)+"\n";
      ics += "DTEND:"+fmt(endDate)+"\n";
      ics += "SUMMARY:"+data[i].task+"\n";
      ics += "DESCRIPTION:"+data[i].ziel+"\n";
      ics += "END:VEVENT\n";
    }
    ics += "END:VCALENDAR";
    downloadFile(ics, "mindframe.ics", "text/calendar");
  }

  else if (type === "xlsx") {
    let csv = "Zeit,Task,Ziel\n";
    data.forEach(d => {
      csv += `${d.time},"${d.task}","${d.ziel}"\n`;
    });
    downloadFile(csv, "mindframe.xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
  }

  else if (type === "pdf") {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF("l", "pt", "a4");
    doc.setFontSize(16);
    doc.text("MindFrame – Tagesplan", 40, 40);

    let y = 70;
    doc.setFontSize(10);
    data.forEach(d => {
      doc.text(`${d.time} – ${d.task} (Ziel: ${d.ziel})`, 40, y);
      y += 14;
      if (y > 550) {
        doc.addPage();
        y = 40;
      }
    });

    doc.save("mindframe.pdf");
  }
}

function downloadFile(content, filename, type) {
  let blob = content instanceof Blob ? content : new Blob([content], { type });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
}
</script>

</body>
</html>
